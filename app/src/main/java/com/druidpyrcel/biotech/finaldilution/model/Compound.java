package com.druidpyrcel.biotech.finaldilution.model;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "COMPOUND".
 */
public class Compound implements java.io.Serializable {

    private String shortName;
    private Double molarMass;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient CompoundDao myDao;


    // KEEP FIELDS - put your custom fields here
    private String longName;
    private String chemicalFormula;
    private String iupacName;
    // KEEP FIELDS END

    public Compound() {
    }

    public Compound(String shortName) {
        this.shortName = shortName;
    }

    public Compound(String shortName, Double molarMass) {
        this.shortName = shortName;
        this.molarMass = molarMass;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCompoundDao() : null;
    }

    public String getShortName() {
        return shortName;
    }

    public void setShortName(String shortName) {
        this.shortName = shortName;
    }

    public Double getMolarMass() {
        return molarMass;
    }

    public void setMolarMass(Double molarMass) {
        this.molarMass = molarMass;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String getLongName() {
        return longName;
    }

    public void setLongName(String longName) {
        this.longName = longName;
    }

    public String getChemicalFormula() {
        return chemicalFormula;
    }

    public void setChemicalFormula(String chemicalFormula) {
        this.chemicalFormula = chemicalFormula;
    }

    public String getIupacName() {
        return iupacName;
    }

    public void setIupacName(String iupacName) {
        this.iupacName = iupacName;
    }

    @Override
    public String toString() {
        return shortName + " [" + molarMass + "]";
    }

    @Override
    public boolean equals(Object o) {
        if (!(o instanceof Compound)) {
            return false;
        }
        if (o == this) {
            return true;
        }
        Compound secondCompound = (Compound) o;
        return shortName.equals(secondCompound.getShortName());
    }
    // KEEP METHODS END

}
