package com.druidpyrcel.biotech.finaldilution.model;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "SOLUTION".
 */
public class Solution {

    private String name;
    private double volume;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SolutionDao myDao;

    private List<Component> components;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Solution() {
    }

    public Solution(String name) {
        this.name = name;
    }

    public Solution(String name, double volume) {
        this.name = name;
        this.volume = volume;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSolutionDao() : null;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getVolume() {
        return volume;
    }

    public void setVolume(double volume) {
        this.volume = volume;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Component> getComponents() {
        if (components == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ComponentDao targetDao = daoSession.getComponentDao();
            List<Component> componentsNew = targetDao._querySolution_Components(name);
            synchronized (this) {
                if (components == null) {
                    components = componentsNew;
                }
            }
        }
        return components;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComponents() {
        components = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public String calculateQuantities() {
        StringBuilder niceOutput = new StringBuilder(800);
        for (Component component : getComponents()) {
            niceOutput.append(component.getAmountString());
            niceOutput.append(System.getProperty("line.separator"));
        }
        return niceOutput.toString();
    }
    // KEEP METHODS END

}
